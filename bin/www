#!/usr/bin/env node

/**
 * Module dependencies.
 */

const createSocket = require('socket.io');
const http = require('http');
const debug = require('debug')('trello-clone:server');
const app = require('../app');

/**
 * Get port from environment and store in Express.
 */

// eslint-disable-next-line no-use-before-define
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Add sockets for update information between users
 */
const io = createSocket(server);

io.on('connection', socket => {
  // eslint-disable-next-line no-console
  console.log('a user has connected');
  socket.on('disconnect', () => {
    // eslint-disable-next-line no-console
    console.log('user disconnected');
  });

  // update board information
  socket.on('boardServer', data => {
    socket.broadcast.emit('boardClient', {
      boardColor: data.boardColor,
      lists: data.lists,
    });
  });

  // update list information in modal window
  socket.on('modalListServer', data => {
    io.sockets.emit('modalListClient', {
      modalList: data.modalList,
      modalListIndex: data.modalListIndex,
    });
  });

  // update task information in modal window
  socket.on('modalTaskServer', data => {
    io.sockets.emit('modalTaskClient', {
      modalList: data.modalList,
      modalListIndex: data.modalListIndex,
      modalTask: data.modalTask,
      modalTaskIndex: data.modalTaskIndex,
      editedTaskName: data.modalTask.taskName,
      listNameForTask: data.modalList.listName,
    });
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

// eslint-disable-next-line func-names
server.listen(port, function() {
  // eslint-disable-next-line no-console
  console.log(`listening on port ${port}`);
});
// eslint-disable-next-line no-use-before-define
server.on('error', onError);
// eslint-disable-next-line no-use-before-define
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  // eslint-disable-next-line no-shadow
  const port = parseInt(val, 10);

  // eslint-disable-next-line no-restricted-globals
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? `Pipe ${  port}` : `Port ${  port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      // eslint-disable-next-line no-console
      console.error(`${bind  } requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      // eslint-disable-next-line no-console
      console.error(`${bind  } is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${  addr}` : `port ${  addr.port}`;
  debug(`Listening on ${bind}`);
}
