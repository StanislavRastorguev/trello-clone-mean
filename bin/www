#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('trello-clone:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Add sockets for update information between users
 */
const io = require('socket.io')(server);

io.on('connection', (socket) => {
  console.log('a user has connected');
  socket.on('disconnect', () => {
    console.log('user disconnected');
  });

  //update board information
  socket.on('boardServer', (data) => {
    socket.broadcast.emit('boardClient', { boardColor: data.boardColor, lists: data.lists });
  });

  //update list information in modal window
  socket.on('modalListServer', (data) => {
    io.sockets.emit('modalListClient', {
      modalList: data.modalList,
      modalListIndex: data.modalListIndex,
    });
  });

  //update task information in modal window
  socket.on('modalTaskServer', (data) => {
    io.sockets.emit('modalTaskClient', {
      modalList: data.modalList,
      modalListIndex: data.modalListIndex,
      modalTask: data.modalTask,
      modalTaskIndex: data.modalTaskIndex,
      editedTaskName: data.modalTask.taskName,
      listNameForTask: data.modalList.listName
    });
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  console.log('listening on port ' + port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

